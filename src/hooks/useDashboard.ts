
import { useState, useEffect, useCallback } from 'react';
import { useAuth } from '@/contexts/AuthContext';
import { supabase } from '@/integrations/supabase/client';
import { toast } from 'sonner';

export const useDashboard = () => {
  const { user } = useAuth();
  const [userProfile, setUserProfile] = useState<any>(null);
  const [userStats, setUserStats] = useState({
    points: 0,
    level: 1,
    tasksCompleted: 0,
    currentStreak: 0,
    rank: 0,
    referrals: 0,
    followers: 0,
    following: 0
  });
  const [userTasks, setUserTasks] = useState<any[]>([]);
  const [userSubmissions, setUserSubmissions] = useState<any[]>([]);
  const [completedTasks, setCompletedTasks] = useState<any[]>([]);
  const [totalPointsEarned, setTotalPointsEarned] = useState(0);
  const [withdrawalStats, setWithdrawalStats] = useState({
    pendingWithdrawals: 0,
    completedWithdrawals: 0
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const loadUserData = useCallback(async () => {
    if (!user) {
      setLoading(false);
      return;
    }
    
    try {
      setLoading(true);
      setError(null);
      
      console.log('Loading user data for:', user.id);
      
      // Load all data in parallel for faster loading
      const [profileResult, tasksResult, submissionsResult, withdrawalsResult] = await Promise.allSettled([
        supabase.from('profiles').select('*').eq('id', user.id).maybeSingle(),
        supabase.from('user_tasks').select(`
          *,
          tasks (
            id,
            title,
            description,
            points,
            category,
            difficulty
          )
        `).eq('user_id', user.id).order('created_at', { ascending: false }),
        supabase.from('task_submissions').select(`
          *,
          tasks (
            id,
            title,
            description,
            points,
            category,
            difficulty
          )
        `).eq('user_id', user.id).order('submitted_at', { ascending: false }),
        supabase.from('withdrawal_requests').select('amount, status').eq('user_id', user.id)
      ]);

      // Handle profile data
      if (profileResult.status === 'fulfilled' && !profileResult.value.error) {
        const profile = profileResult.value.data;
        setUserProfile(profile);
        if (profile) {
          setUserStats({
            points: profile.points || 0,
            level: profile.level || 1,
            tasksCompleted: profile.tasks_completed || 0,
            currentStreak: 0,
            rank: 0,
            referrals: profile.active_referrals_count || 0,
            followers: profile.followers_count || 0,
            following: profile.following_count || 0,
          });
          setTotalPointsEarned(profile.points || 0);
        }
      } else if (profileResult.status === 'fulfilled' && !profileResult.value.data) {
        // Profile doesn't exist, create one automatically
        console.log('No profile found, creating default profile...');
        setError('Failed to load profile data. Creating profile...');
        try {
          const { data: newProfile, error: createError } = await supabase
            .from('profiles')
            .insert({
              id: user.id,
              name: user.email?.split('@')[0] || 'User',
              email: user.email,
              points: 0,
              level: 1,
              tasks_completed: 0,
              active_referrals_count: 0,
              total_referrals_count: 0,
              followers_count: 0,
              following_count: 0,
              can_post_in_chat: false,
              task_completion_rate: 0.0,
              referral_code: null // Will be generated by trigger
            })
            .select()
            .single();

          if (!createError && newProfile) {
            console.log('Profile created successfully:', newProfile);
            setUserProfile(newProfile);
            setUserStats({
              points: 0,
              level: 1,
              tasksCompleted: 0,
              currentStreak: 0,
              rank: 0,
              referrals: 0,
              followers: 0,
              following: 0,
            });
            setTotalPointsEarned(0);
            setError(null);
            toast.success('Profile created successfully!');
          } else {
            console.error('Failed to create profile:', createError);
            setError(`Failed to create profile: ${createError?.message || 'Unknown error'}`);
            toast.error('Failed to create profile. Please try refreshing the page.');
          }
        } catch (createError) {
          console.error('Exception creating profile:', createError);
          setError(`Failed to create profile: ${createError instanceof Error ? createError.message : 'Unknown error'}`);
          toast.error('Failed to create profile. Please try refreshing the page.');
        }
      } else if (profileResult.status === 'rejected' || (profileResult.status === 'fulfilled' && profileResult.value.error)) {
        const errorMsg = profileResult.status === 'rejected' ? 
          profileResult.reason?.message || 'Network error' : 
          profileResult.value.error?.message || 'Database error';
        console.error('Profile query failed:', errorMsg);
        setError(`Failed to load profile data: ${errorMsg}`);
        toast.error('Failed to load profile data. Please try refreshing the page.');
      }

      // Handle tasks data
      if (tasksResult.status === 'fulfilled' && !tasksResult.value.error) {
        setUserTasks(tasksResult.value.data || []);
      }

      // Handle submissions data
      if (submissionsResult.status === 'fulfilled' && !submissionsResult.value.error) {
        const submissions = submissionsResult.value.data || [];
        setUserSubmissions(submissions);
        const approved = submissions.filter((sub: any) => sub.status === 'approved');
        setCompletedTasks(approved);
      }

      // Handle withdrawals data
      if (withdrawalsResult.status === 'fulfilled' && !withdrawalsResult.value.error) {
        const withdrawals = withdrawalsResult.value.data || [];
        const pending = withdrawals
          .filter(w => w.status === 'pending' || w.status === 'approved')
          .reduce((sum, w) => sum + w.amount, 0);
        const completed = withdrawals
          .filter(w => w.status === 'completed')
          .reduce((sum, w) => sum + w.amount, 0);
        
        setWithdrawalStats({
          pendingWithdrawals: pending,
          completedWithdrawals: completed
        });
      }
      
    } catch (error) {
      console.error('Error loading user data:', error);
      setError('Failed to load dashboard data. Please try again.');
    } finally {
      setLoading(false);
    }
  }, [user]);

  useEffect(() => {
    loadUserData();
  }, [loadUserData]);
  
  return {
    user,
    userProfile,
    userStats,
    userTasks,
    userSubmissions,
    completedTasks,
    totalPointsEarned,
    withdrawalStats,
    loading,
    error,
    loadUserData
  };
};
